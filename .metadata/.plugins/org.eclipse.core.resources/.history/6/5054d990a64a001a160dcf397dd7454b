package Teste;
import org.junit.Assert;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;

import Pages.Blog;
import Pages.Busca;
import Pages.Fap;
import Pages.Formulario;
import cucumber.api.Scenario;
import cucumber.api.java.After;
import cucumber.api.java.Before;
import cucumber.api.java.pt.Dado;
import cucumber.api.java.pt.Entao;
import cucumber.api.java.pt.Quando;
public class TesteCucumber {
	//Iniciação do browser
	public static WebDriver driver = new FirefoxDriver();
	public static WebDriver getDriver() {
		return driver;
	}
	// PageObjects
	Blog blogPage = new Blog();
	Busca buscaPage = new Busca();
	Fap fapPage = new Fap();
	Formulario formularioPage = new Formulario();
	// GerarRelatorios
	private static ExtentHtmlReporter htmlReporter;
	private static ExtentReports extentReport;
	public static ExtentTest extentTest;
	public static ExtentTest getExtentTest() {
		return extentTest;
	}
	//Before
	@Before
	public void before(Scenario cenario) {
		//Verifica se o browser esta iniciado
		if (driver == null) {
			driver = new FirefoxDriver();
		}
		//Verifica existencia de relatorio
		if (extentReport == null) {
			extentReport = new ExtentReports();
			htmlReporter = new ExtentHtmlReporter("src/test/resources/Report.html");
			extentReport.attachReporter(htmlReporter);
		}
		extentTest = extentReport.createTest(cenario.getName());
	}
	//After
	@After
	public void after(Scenario cenario) {
		//Grava relatorio
		extentTest.log(Status.PASS, "Cenario: " + cenario.getName() + " executado com sucesso!");
		extentReport.flush();
		//Fecha browser
		if (!(driver == null)) {
			driver.close();
			driver = null;
		}
	}
	//Cenario Buscar
	@Dado("^que eu acesso o site para busca$")
	public void que_eu_acesso_o_site_para_busca() throws Throwable {
		blogPage.acessarSite();
		Assert.assertEquals("BUSCA BLOG", blogPage.validarTelaBusca());
		blogPage.reportAcessaSite();
	}
	@Quando("^eu buscar por \"([^\"]*)\"$")
	public void eu_buscar_por(String palavra) throws Throwable {
		blogPage.realizarBusca(palavra);
	}
	@Entao("^eu vejo o resultado da busca \"([^\"]*)\"$")
	public void eu_vejo_o_resultado_da_busca(String palavra) {
		Assert.assertEquals(palavra.toUpperCase(), buscaPage.validarResultadoBusca());
	}
	//Cenario Estimar FAP
	@Dado("^que eu acesso a pagina do FAP$")
	public void que_eu_acesso_a_pagina_do_FAP() throws Throwable {
		blogPage.acessarFap();
		Assert.assertEquals(("Gestão FAP: estratégiapara diminuir custos").toUpperCase().trim(), fapPage.validarTelaFap().trim());
	}
	@Quando("^preencher campo empresa com \"([^\"]*)\"$")
	public void preencher_campo_empresa_com(String empresa) throws Throwable {
		fapPage.preencherEmpresa(empresa);
	}
	@Quando("^preencher campo fap com (\\d+)$")
	public void preencher_campo_fap_com(int fap) throws Throwable {
		fapPage.preencherFap(fap);
	}
	@Quando("^preencher campo rat com (\\d+)$")
	public void preencher_campo_rat_com(int rat) throws Throwable {
		fapPage.preencherRat(rat);
	}
	@Quando("^preencher campo de projecao de massa salarial com \"([^\"]*)\"$")
	public void preencher_campo_de_projecao_de_massa_salarial_com(String salario) throws Throwable {
		fapPage.preencherSalario(salario);
	}
	@Quando("^clicar para estimar o FAP$")
	public void clicar_para_estimar_o_FAP() throws Throwable {
		fapPage.estimarFormulario();
	}
	@Entao("^exibe o nome da empresa$")
	public void exibe_o_nome_da_empresa() throws Throwable {
		Assert.assertEquals(Formulario.getEmpresa().trim(), formularioPage.validarEmpresa().trim());
	}
	@Entao("^exibe o resultado do calculo de recolhimento maximo$")
	public void exibe_o_resultado_do_calculo_de_recolhimento_maximo() throws Throwable {
		Assert.assertEquals(Formulario.getMaximo().trim(), formularioPage.validarMaximo().trim());
	}
	@Entao("^exibe o resultado do calculo de recolhimento minimo$")
	public void exibe_o_resultado_do_calculo_de_recolhimento_minimo() throws Throwable {
		Assert.assertEquals(Formulario.getMinimo().trim(), formularioPage.validarMinimo().trim());
	}
	@Entao("^exibe o resultado do calculo de passivel de economia$")
	public void exibe_o_resultado_do_calculo_de_passivel_de_economia() throws Throwable {
		Assert.assertEquals(Formulario.getEconomia().trim(), formularioPage.validarEconomia().trim());
	}
}